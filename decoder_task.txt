`NOP:     next_state    =    INST;
`MOV_AR:  next_state    =    IO_ARGA;
`MOV_RR:  next_state    =    TWO_ARGA;
`MOV_RA:  next_state    =    IO_ARGA;
`LOAD:    next_state    =    TWO_ARGA;
`ADD_RR:  next_state    =    TWO_ARGA;
`ADD_RI:  next_state    =    TWO_ARGA;
`SUB_RR:  next_state    =    TWO_ARGA;
`SUB_RI:  next_state    =    TWO_ARGA;
`AND_RR:  next_state    =    TWO_ARGA;
`AND_RI:  next_state    =    TWO_ARGA;
`OR_RR:   next_state    =    TWO_ARGA;
`OR_RI:   next_state    =    TWO_ARGA;
`NOT_RR:  next_state    =    TWO_ARGA;
`NOT_RI:  next_state    =    TWO_ARGA;
`XOR_RR:  next_state    =    TWO_ARGA;
`XOR_RI:  next_state    =    TWO_ARGA;
`RAND_R:  next_state    =    TWO_ARGA;
`RAND_I:  next_state    =    TWO_ARGA;
`ROR_R:   next_state    =    TWO_ARGA;
`ROR_I:   next_state    =    TWO_ARGA;
`RXOR_R:  next_state    =    TWO_ARGA;
`RXOR_I:  next_state    =    TWO_ARGA;
`LSL_R:   next_state    =    ONE_ARG;
`LSL_I:   next_state    =    TWO_ARGA;
`LSR_R:   next_state    =    ONE_ARG;
`LSR_I:   next_state    =    TWO_ARGA;
`ASL_R:   next_state    =    ONE_ARG;
`ASL_I:   next_state    =    TWO_ARGA;
`ASR_R:   next_state    =    ONE_ARG;
`ASR_I:   next_state    =    TWO_ARGA;
`CSL_R:   next_state    =    ONE_ARG;
`CSL_I:   next_state    =    TWO_ARGA;
`CSR_R:   next_state    =    ONE_ARG;
`CSR_I:   next_state    =    TWO_ARGA;
`INC:     next_state    =    TWO_ARGA;
`DEC:     next_state    =    TWO_ARGA;
`JMP:     next_state    =    TWO_ARGA;
`PUSH:    next_state    =    IO_ONE_ARG;
`POP:     next_state    =    IO_ONE_ARG;
`INT:     next_state    =    IO_OP;
`SAVEPC:  next_state    =    INST;
`RECOPC:  next_state    =    INST;
